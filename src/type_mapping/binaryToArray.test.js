import {
  binaryToIntArray,
  binaryToGfpArray,
  regIntToHexString
} from './binaryToArray'

describe('Extract an array of unsigned ints from a byte array sent by SPDZ', () => {
  it('successfully extracts 4 integers from 2 engine results', () => {
    // prettier-ignore
    const byteBufferList = [Uint8Array.from([0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0]),
      Uint8Array.from([0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0])]
    const intArray = binaryToIntArray(byteBufferList)

    expect(intArray.length).toEqual(4)
    expect(intArray).toEqual([1, 2, 3, 4])
  })

  it('throws an error if the wrong length is passed in', () => {
    // prettier-ignore
    const testThrowsWrongType = () => binaryToIntArray([Uint8Array.from([0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0])])

    expect(testThrowsWrongType).toThrowError(
      'Spdz proxy 0 provided 7 bytes, expected multiple of 4.'
    )
  })

  it('throws an error if the SDPZ result is not consistant', () => {
    // prettier-ignore
    const byteBufferList = [Uint8Array.from([0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0]),
      Uint8Array.from([0xaa, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0])]

    const testThrowsNotConsistant = () => binaryToIntArray(byteBufferList)

    expect(testThrowsNotConsistant).toThrowError(
      'Not all parties have sent the same result.'
    )
  })

  it('throws an error if the SDPZ result length is not consistant', () => {
    // prettier-ignore
    const byteBufferList = [Uint8Array.from([0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0]),
      Uint8Array.from([0xaa, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0])]

    const testThrowsNotConsistant = () => binaryToIntArray(byteBufferList)

    expect(testThrowsNotConsistant).toThrowError(
      'Not all parties have sent the same result.'
    )
  })
})

describe('Extract an array of gfp big ints from a byte array sent by SPDZ', () => {
  it('successfully extracts 1 gfp integer from 2 engine results', () => {
    // prettier-ignore
    const byteBufferList = [Uint8Array.from([0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
      Uint8Array.from([0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])]
    const gfpArray = binaryToGfpArray(byteBufferList, true)

    expect(gfpArray.length).toEqual(1)
    expect(gfpArray[0].val.toString()).toEqual('16843009')
  })

  it('throws an error if the wrong length is passed in', () => {
    // prettier-ignore
    const testThrowsWrongType = () => binaryToGfpArray([Uint8Array.from([0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0])])

    expect(testThrowsWrongType).toThrowError(
      'Spdz proxy 0 provided 7 bytes, expected multiple of 16.'
    )
  })

  it('throws an error if the SDPZ result is not consistant', () => {
    // prettier-ignore
    const byteBufferList = [Uint8Array.from([0x2, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]),
      Uint8Array.from([0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0])]

    const testThrowsNotConsistant = () =>
      binaryToGfpArray(byteBufferList, false)

    expect(testThrowsNotConsistant).toThrowError(
      'Not all parties have sent the same result.'
    )
  })
})

describe('Extract 8 regints from a byte array sent by SPDZ into a hex string', () => {
  it('successfully extracts the client public key from 2 engine results', () => {
    // prettier-ignore
    const byteBufferList = [Uint8Array.from([0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0,
      0x5, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0]),
      Uint8Array.from([0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0,
        0x5, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0])]

    expect(regIntToHexString(byteBufferList, 8)).toEqual(
      '0000000100000002000000030000000400000005000000060000000700000008'
    )
  })

  it('throws an error if the wrong length is passed in', () => {
    // prettier-ignore
    const testThrowsWrongType = () => regIntToHexString([Uint8Array.from([0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0])], 8)

    expect(testThrowsWrongType).toThrowError(
      'Spdz proxy 0 provided 16 bytes, expected multiple of 32.'
    )
  })

  it('throws an error if the SDPZ result is not consistant', () => {
    // prettier-ignore
    const byteBufferList = [Uint8Array.from([0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0,
      0x5, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0]),
      Uint8Array.from([0xaa, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0,
        0x5, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0])]

    const testThrowsNotConsistant = () => regIntToHexString(byteBufferList, 8)

    expect(testThrowsNotConsistant).toThrowError(
      'Not all parties have sent the same result.'
    )
  })
})
